generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String
  name           String
  imageUrl       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  companies      Company[] @relation("CompanyMembers")
  ownedCompanies Company[] @relation("CompanyOwner")
}

model Company {
  id          String    @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String
  owner       User      @relation("CompanyOwner", fields: [ownerId], references: [id])
  members     User[]    @relation("CompanyMembers")
  projects    Project[]
}

model Project {
  id          String          @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  companyId   String
  company     Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tasks       Task[]
  tags        Tag[]
  details     ProjectDetail[] // Add this line to connect project details
}

model Task {
  id              String    @id @default(uuid())
  title           String
  description     String?
  status          Status    @default(TODO)
  priority        Priority  @default(MEDIUM)
  dueDate         DateTime?
  startDate       DateTime  @default(now())
  actualStartDate DateTime?
  actualEndDate   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  projectId       String
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tags            Tag[]     @relation("TaskToTag")

  // Dependencies relationship (many-to-many self-relation)
  dependencies    Task[]    @relation("TaskDependencies")
  dependencyFor   Task[]    @relation("TaskDependencies")

  // Parent-child relationship for subtasks
  parent          Task?     @relation("TaskSubtasks", fields: [parentId], references: [id], onDelete: Cascade)
  parentId        String?
  subtasks        Task[]    @relation("TaskSubtasks")
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  color     String   @default("#3b82f6") // Default blue color
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]   @relation("TaskToTag")
}

enum Status {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model ProjectDetail {
  id          String   @id @default(uuid())
  title       String
  url         String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
